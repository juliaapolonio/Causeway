{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview juliaapolonio/Causeway is a pipeline for Mendelian Randomization and sensitivity analysis between a phenotype GWAS sumstats and QTL data. Previous MR tools have been used to analyze a small number of exposure-outcome combinations, but they are not optimized to perform with a large number of combinations such as in a genome-wide QTL screening. In this context, Causeway was built to enable MR + sensitivity analysis in a user-friendly and computationally effective way. The pipeline is built using Nextflow , a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. As a future improvement, when possible, the local modules will be submitted to and installed from nf-core/modules in order to make them available to all nf-core pipelines, and to everyone within the Nextflow community! Pipeline summary Generalized Summary Mendelian Randomization (GSMR) This is the main part of the process. It runs GSMR for all Exposures vs the Outcomes and returns: number of IVs, betas, SEs and p-values for each exposure. Significant gene calculation and filtering With the results from GSMR, this module calculates the FDR p-value for each gene and filters by it and the number of IVs. This step will substantially decrease the number of tasks for the subsequent processes, and therefore, the execution time of the pipeline. Two Sample MR (2SMR) Two Sample MR is an R package that performs Mendelian Randomization and sensitivity analysis. The workflow is configured to run the following 2SMR tests: Inverse Variance Weighted regression; Simple Median regression; Simple mode regression; MR Egger regression; Heterogeneity Egger; Heterogeneity Inverse Variance Weighted; Steiger direction test; Pleiotropy Egger intercept; MR-PRESSO outlier analysis. Coloc Coloc is an R package for colocalization analysis. For this workflow, the information retrieved from Coloc are: H3; H4; Most probable causal variant. Generate output report This set of processes collects all results from the analysis and merges them into a single .csv file and the results are filtered to a list of candidate drug targets. An HTML report is generated with the analysis highlights. Quick Start Install Nextflow ( >=22.10.1 ) Install any of Docker , Singularity (you can follow this tutorial ), Podman , Shifter or Charliecloud for full pipeline reproducibility (you can use Conda both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see docs ) . Download the pipeline and test it on a minimal dataset with a single command: nextflow run juliaapolonio/Causeway -profile test,YOURPROFILE --outdir <OUTDIR> This will set up 4 genes from eQTLGen cis-eQTL data and 1000 Genomes phase 3 dataset (GRCh37) genotype p-file with a custom Strict Depression summary statistics retrieved from MTAG. Note that some form of configuration will be needed so that Nextflow knows how to fetch the required software. This is usually done in the form of a config profile ( YOURPROFILE in the example command above). The pipeline comes with config profiles called docker , singularity , podman , shifter , charliecloud and conda which instruct the pipeline to use the named tool for software management. For example, -profile test,docker . Please check nf-core/configs to see if a custom config file to run nf-core pipelines already exists for your Institute. If so, you can simply use -profile <institute> in your command. This will enable either docker or singularity and set the appropriate execution settings for your local compute environment. If you are using singularity , please use the nf-core download command to download images first, before running the pipeline. Setting the NXF_SINGULARITY_CACHEDIR or singularity.cacheDir Nextflow options enables you to store and re-use the images from a central location for future pipeline runs. If you are using conda , it is highly recommended to use the NXF_CONDA_CACHEDIR or conda.cacheDir settings to store the environments in a central location for future pipeline runs. Start running your own analysis! nextflow run juliaapolonio/Causeway \\ --exposures <EXPOSURE_SAMPLESHEET> \\ --outdir <OUTDIR> \\ --ref <REFERENCE_FOLDER> \\ --outcomes <OUTCOME_SAMPLESHEET> \\ -profile <docker/singularity/podman/shifter/charliecloud/conda/institute> Databases and references MR_workflow needs 3 inputs to run: A reference folder; An Exposure sample sheet; An Outcome file. Both Exposure and Outcome files should follow the GCTA-Cojo format . The Exposure file should be separated by one gene per file. The reference files should be in PLINK bfile format. Neither the Exposure nor the Outcome files should contain multi-allelic SNPs; the frequency (freq) is the Minor Allele Frequency (MAF). If the Outcome has a small number of SNPs (less than 2M) it is expected that a substantial amount of the tasks will fail due to lack or small number of matching IVs between the Exposure and Outcome data. If the Outcome data has a large number of SNPs (more than 10M) it is still expected that around 10% of GSMR tasks will fail. Outputs If successfully run, the workflow should give three files as the main output: summary_report.html is a html report with all analysis highlights; mr_merged_results.csv should contain all analyses results for each GSMR significant gene; significant_genes.txt should give a gene list of all genes that fill the criteria defined in its paper. Other intermediate outputs are stored in a folder with the corresponding process name and are described in the output section . Credits juliaapolonio/Causeway was authored by Julia Apolonio with Jo\u00e3o Cavalcante and Diego Coelho 's assistance, under Dr. Vasiliki Lagou 's supervision. Citations Causal associations between risk factors and common diseases inferred from GWAS summary data. Zhihong Zhu, Zhili Zheng, Futao Zhang, Yang Wu, Maciej Trzaskowski, Robert Maier, Matthew R. Robinson, John J. McGrath, Peter M. Visscher, Naomi R. Wray & Jian Yang Nature Communications 2018 Jan 15. doi: 10.1038/s41467-017-02317-2 The MR-Base platform supports systematic causal inference across the human phenome. Hemani G, Zheng J, Elsworth B, Wade KH, Baird D, Haberland V, Laurin C, Burgess S, Bowden J, Langdon R, Tan VY, Yarmolinsky J, Shihab HA, Timpson NJ, Evans DM, Relton C, Martin RM, Davey Smith G, Gaunt TR, Haycock PC, The MR-Base Collaboration. eLife 2018 Jul. doi: 10.7554/eLife.34408 Eliciting priors and relaxing the single causal variant assumption in colocalisation analyses Chris Wallace PLOS Genetics 2020 Apr 20. doi: 10.1371/journal.pgen.1008720 The nf-core framework for community-curated bioinformatics pipelines. Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen. Nat Biotechnol. 2020 Feb 13. doi: 10.1038/s41587-020-0439-x .","title":"Home"},{"location":"#overview","text":"juliaapolonio/Causeway is a pipeline for Mendelian Randomization and sensitivity analysis between a phenotype GWAS sumstats and QTL data. Previous MR tools have been used to analyze a small number of exposure-outcome combinations, but they are not optimized to perform with a large number of combinations such as in a genome-wide QTL screening. In this context, Causeway was built to enable MR + sensitivity analysis in a user-friendly and computationally effective way. The pipeline is built using Nextflow , a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. As a future improvement, when possible, the local modules will be submitted to and installed from nf-core/modules in order to make them available to all nf-core pipelines, and to everyone within the Nextflow community!","title":"Overview"},{"location":"#pipeline-summary","text":"","title":"Pipeline summary"},{"location":"#generalized-summary-mendelian-randomization-gsmr","text":"This is the main part of the process. It runs GSMR for all Exposures vs the Outcomes and returns: number of IVs, betas, SEs and p-values for each exposure.","title":"Generalized Summary Mendelian Randomization (GSMR)"},{"location":"#significant-gene-calculation-and-filtering","text":"With the results from GSMR, this module calculates the FDR p-value for each gene and filters by it and the number of IVs. This step will substantially decrease the number of tasks for the subsequent processes, and therefore, the execution time of the pipeline.","title":"Significant gene calculation and filtering"},{"location":"#two-sample-mr-2smr","text":"Two Sample MR is an R package that performs Mendelian Randomization and sensitivity analysis. The workflow is configured to run the following 2SMR tests: Inverse Variance Weighted regression; Simple Median regression; Simple mode regression; MR Egger regression; Heterogeneity Egger; Heterogeneity Inverse Variance Weighted; Steiger direction test; Pleiotropy Egger intercept; MR-PRESSO outlier analysis.","title":"Two Sample MR (2SMR)"},{"location":"#coloc","text":"Coloc is an R package for colocalization analysis. For this workflow, the information retrieved from Coloc are: H3; H4; Most probable causal variant.","title":"Coloc"},{"location":"#generate-output-report","text":"This set of processes collects all results from the analysis and merges them into a single .csv file and the results are filtered to a list of candidate drug targets. An HTML report is generated with the analysis highlights.","title":"Generate output report"},{"location":"#quick-start","text":"Install Nextflow ( >=22.10.1 ) Install any of Docker , Singularity (you can follow this tutorial ), Podman , Shifter or Charliecloud for full pipeline reproducibility (you can use Conda both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see docs ) . Download the pipeline and test it on a minimal dataset with a single command: nextflow run juliaapolonio/Causeway -profile test,YOURPROFILE --outdir <OUTDIR> This will set up 4 genes from eQTLGen cis-eQTL data and 1000 Genomes phase 3 dataset (GRCh37) genotype p-file with a custom Strict Depression summary statistics retrieved from MTAG. Note that some form of configuration will be needed so that Nextflow knows how to fetch the required software. This is usually done in the form of a config profile ( YOURPROFILE in the example command above). The pipeline comes with config profiles called docker , singularity , podman , shifter , charliecloud and conda which instruct the pipeline to use the named tool for software management. For example, -profile test,docker . Please check nf-core/configs to see if a custom config file to run nf-core pipelines already exists for your Institute. If so, you can simply use -profile <institute> in your command. This will enable either docker or singularity and set the appropriate execution settings for your local compute environment. If you are using singularity , please use the nf-core download command to download images first, before running the pipeline. Setting the NXF_SINGULARITY_CACHEDIR or singularity.cacheDir Nextflow options enables you to store and re-use the images from a central location for future pipeline runs. If you are using conda , it is highly recommended to use the NXF_CONDA_CACHEDIR or conda.cacheDir settings to store the environments in a central location for future pipeline runs. Start running your own analysis! nextflow run juliaapolonio/Causeway \\ --exposures <EXPOSURE_SAMPLESHEET> \\ --outdir <OUTDIR> \\ --ref <REFERENCE_FOLDER> \\ --outcomes <OUTCOME_SAMPLESHEET> \\ -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>","title":"Quick Start"},{"location":"#databases-and-references","text":"MR_workflow needs 3 inputs to run: A reference folder; An Exposure sample sheet; An Outcome file. Both Exposure and Outcome files should follow the GCTA-Cojo format . The Exposure file should be separated by one gene per file. The reference files should be in PLINK bfile format. Neither the Exposure nor the Outcome files should contain multi-allelic SNPs; the frequency (freq) is the Minor Allele Frequency (MAF). If the Outcome has a small number of SNPs (less than 2M) it is expected that a substantial amount of the tasks will fail due to lack or small number of matching IVs between the Exposure and Outcome data. If the Outcome data has a large number of SNPs (more than 10M) it is still expected that around 10% of GSMR tasks will fail.","title":"Databases and references"},{"location":"#outputs","text":"If successfully run, the workflow should give three files as the main output: summary_report.html is a html report with all analysis highlights; mr_merged_results.csv should contain all analyses results for each GSMR significant gene; significant_genes.txt should give a gene list of all genes that fill the criteria defined in its paper. Other intermediate outputs are stored in a folder with the corresponding process name and are described in the output section .","title":"Outputs"},{"location":"#credits","text":"juliaapolonio/Causeway was authored by Julia Apolonio with Jo\u00e3o Cavalcante and Diego Coelho 's assistance, under Dr. Vasiliki Lagou 's supervision.","title":"Credits"},{"location":"#citations","text":"Causal associations between risk factors and common diseases inferred from GWAS summary data. Zhihong Zhu, Zhili Zheng, Futao Zhang, Yang Wu, Maciej Trzaskowski, Robert Maier, Matthew R. Robinson, John J. McGrath, Peter M. Visscher, Naomi R. Wray & Jian Yang Nature Communications 2018 Jan 15. doi: 10.1038/s41467-017-02317-2 The MR-Base platform supports systematic causal inference across the human phenome. Hemani G, Zheng J, Elsworth B, Wade KH, Baird D, Haberland V, Laurin C, Burgess S, Bowden J, Langdon R, Tan VY, Yarmolinsky J, Shihab HA, Timpson NJ, Evans DM, Relton C, Martin RM, Davey Smith G, Gaunt TR, Haycock PC, The MR-Base Collaboration. eLife 2018 Jul. doi: 10.7554/eLife.34408 Eliciting priors and relaxing the single causal variant assumption in colocalisation analyses Chris Wallace PLOS Genetics 2020 Apr 20. doi: 10.1371/journal.pgen.1008720 The nf-core framework for community-curated bioinformatics pipelines. Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen. Nat Biotechnol. 2020 Feb 13. doi: 10.1038/s41587-020-0439-x .","title":"Citations"},{"location":"faq/","text":"Frequently Asked Questions General Questions What is the purpose of this pipeline? Causeway was built to perform Mendelian Randomization and sensitivity analysis for a large number of exposure-outcome phenotype combinations. Who is the intended audience for this pipeline? The intended audience of this pipeline are bioinformaticians and Epidemiologists/Geneticists familiarized with command-line tools. What input data formats does the pipeline accept? It accepts only summary statistics in GCTA-Cojo format. For more info about inputs, check the usage input section . What are the key outputs of the pipeline? The key output is a report with the main analysis findings. You can check more about this and the other outputs at the outputs section . Installation and Setup What are the minimum system requirements to run the pipeline? You will need a system with a minimum of 4 cores, 8GB RAM, 20GB of storage and Linux, MacOS or Windows Subsystem for Linux (WSL) with Nextflow and a container manager installed. More information this can be found at the system requirements section . Do I need to install any specific software or dependencies before running the pipeline? Apart from Nextflow and a container manager, you won't need to install any dependencies. How do I install and configure the pipeline on my system? You can download, install and set the pipeline with a single command: nextflow pull juliaapolonio/Causeway Usage How do I execute the pipeline with example input data? To execute the pipeline with minimal test data, you will need this command: nextflow run juliaapolonio/Causeway -profile test,YOURPROFILE --outdir <OUTDIR> Where YOURPROFILE will be the container executor you have in your machine. What command-line options are available for customizing the pipeline? A list of optional flags can be found in the optional flags section . How do I specify a custom configuration file? You can add your own configuration file as a profile in the conf directory. Alternatively, you can check if there is an existing configuration profile for your institution at nf-core/configs documentation . Can the pipeline be run on a cluster or cloud environment? Yes, Nextflow can handle lots of cluster and cloud computing environments, such as Slurm, Google Cloud, AWS. More information about it can be found at Nextflow executor documentation . What should I do if my pipeline run is interrupted? You can run it again with the same parameters and adding the -resume option, which will search for the execution cache. Troubleshooting What should I check if the pipeline fails with an error? Where can I find detailed logs of the pipeline execution? For logs of the whole pipeline execution, you can check the pipeline_info folder on the output directory. If you want a log of specific task, you can check its hash in the work directory. See Nextflow documentation on execution reports for more details. Why is the pipeline taking longer than expected to execute? This pipeline should take a while to finish if using large data (e.g. the application analysis took 58 hours using 50GB of RAM in a cluster). If it is abnormally longing to finish, you can check the input data of the tasks that are running. What does it mean if some outputs are missing from the results directory? It probably means that a silent error happened. You can check the log files from the task to see if anything went wrong with the execution. How can I debug issues with specific modules (e.g., rendering reports, statistical analyses)? For each task, Nextflow has a hash that can be found in the work directory. Inside the task folder, you can check the .command.log or .command.err to see if there's anything unusual. Results and Outputs What do the output files in each directory mean and how do I interpret the metrics and visualizations produced by the pipeline? A comprehensive description of the outputs and its interpretations can be found at the outputs section . What should I do if I suspect a bug in the output files? This tool is still under testing and bugs can happen. If you feel that something went wrong with the analysis, please leave an issue with a reproductible example. Can I customize the report generated by the pipeline? You can edit the report by directly editing the report module script. Customization Can I add new analysis modules to the pipeline? Yes! Since the pipeline is all built based on modules, you can add your own analysis and integrate with the pipeline at main.nf , or use this pipeline as a subworkflow. How do I use my own scripts or tools within the pipeline? You will have to build a module and integrate it to the main workflow. Is it possible to change the default parameter values? Not yet. Only by editing the source code for now. How can I incorporate additional datasets into the analysis? You can use any exposure/outcome/reference you want, it just need to follow the usage input guidelines . Performance and Optimization What steps can I take to optimize pipeline performance? Nextflow already does that to you! But if you feel that you need something more custom, you can change nextflow.config or conf/modules.config files. Can I run specific modules independently? Yes, you can use Causeway modules to build your own workflow. Support and Contributions Where can I report bugs or request new features? You can do these requests by raising an issue . Is there a user community or forum for pipeline-related discussions? For Nextflow users, there's the nf-core community ! For this specific pipeline, there's no discussion forum. How can I contribute to the development of the pipeline? If you want to make an improvement in the code, you can open a Pull Request at the Causeway's repository . If you want to be a continuous collaborator, please reach one of the authors. Is there a citation for this pipeline? The paper is in reviewing process but you can cite our BioarXiv preprint: Can I use the pipeline for commercial purposes? Yes, Causeway's license allows the use for commercial purposes.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#general-questions","text":"","title":"General Questions"},{"location":"faq/#what-is-the-purpose-of-this-pipeline","text":"Causeway was built to perform Mendelian Randomization and sensitivity analysis for a large number of exposure-outcome phenotype combinations.","title":"What is the purpose of this pipeline?"},{"location":"faq/#who-is-the-intended-audience-for-this-pipeline","text":"The intended audience of this pipeline are bioinformaticians and Epidemiologists/Geneticists familiarized with command-line tools.","title":"Who is the intended audience for this pipeline?"},{"location":"faq/#what-input-data-formats-does-the-pipeline-accept","text":"It accepts only summary statistics in GCTA-Cojo format. For more info about inputs, check the usage input section .","title":"What input data formats does the pipeline accept?"},{"location":"faq/#what-are-the-key-outputs-of-the-pipeline","text":"The key output is a report with the main analysis findings. You can check more about this and the other outputs at the outputs section .","title":"What are the key outputs of the pipeline?"},{"location":"faq/#installation-and-setup","text":"","title":"Installation and Setup"},{"location":"faq/#what-are-the-minimum-system-requirements-to-run-the-pipeline","text":"You will need a system with a minimum of 4 cores, 8GB RAM, 20GB of storage and Linux, MacOS or Windows Subsystem for Linux (WSL) with Nextflow and a container manager installed. More information this can be found at the system requirements section .","title":"What are the minimum system requirements to run the pipeline?"},{"location":"faq/#do-i-need-to-install-any-specific-software-or-dependencies-before-running-the-pipeline","text":"Apart from Nextflow and a container manager, you won't need to install any dependencies.","title":"Do I need to install any specific software or dependencies before running the pipeline?"},{"location":"faq/#how-do-i-install-and-configure-the-pipeline-on-my-system","text":"You can download, install and set the pipeline with a single command: nextflow pull juliaapolonio/Causeway","title":"How do I install and configure the pipeline on my system?"},{"location":"faq/#usage","text":"","title":"Usage"},{"location":"faq/#how-do-i-execute-the-pipeline-with-example-input-data","text":"To execute the pipeline with minimal test data, you will need this command: nextflow run juliaapolonio/Causeway -profile test,YOURPROFILE --outdir <OUTDIR> Where YOURPROFILE will be the container executor you have in your machine.","title":"How do I execute the pipeline with example input data?"},{"location":"faq/#what-command-line-options-are-available-for-customizing-the-pipeline","text":"A list of optional flags can be found in the optional flags section .","title":"What command-line options are available for customizing the pipeline?"},{"location":"faq/#how-do-i-specify-a-custom-configuration-file","text":"You can add your own configuration file as a profile in the conf directory. Alternatively, you can check if there is an existing configuration profile for your institution at nf-core/configs documentation .","title":"How do I specify a custom configuration file?"},{"location":"faq/#can-the-pipeline-be-run-on-a-cluster-or-cloud-environment","text":"Yes, Nextflow can handle lots of cluster and cloud computing environments, such as Slurm, Google Cloud, AWS. More information about it can be found at Nextflow executor documentation .","title":"Can the pipeline be run on a cluster or cloud environment?"},{"location":"faq/#what-should-i-do-if-my-pipeline-run-is-interrupted","text":"You can run it again with the same parameters and adding the -resume option, which will search for the execution cache.","title":"What should I do if my pipeline run is interrupted?"},{"location":"faq/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"faq/#what-should-i-check-if-the-pipeline-fails-with-an-error","text":"","title":"What should I check if the pipeline fails with an error?"},{"location":"faq/#where-can-i-find-detailed-logs-of-the-pipeline-execution","text":"For logs of the whole pipeline execution, you can check the pipeline_info folder on the output directory. If you want a log of specific task, you can check its hash in the work directory. See Nextflow documentation on execution reports for more details.","title":"Where can I find detailed logs of the pipeline execution?"},{"location":"faq/#why-is-the-pipeline-taking-longer-than-expected-to-execute","text":"This pipeline should take a while to finish if using large data (e.g. the application analysis took 58 hours using 50GB of RAM in a cluster). If it is abnormally longing to finish, you can check the input data of the tasks that are running.","title":"Why is the pipeline taking longer than expected to execute?"},{"location":"faq/#what-does-it-mean-if-some-outputs-are-missing-from-the-results-directory","text":"It probably means that a silent error happened. You can check the log files from the task to see if anything went wrong with the execution.","title":"What does it mean if some outputs are missing from the results directory?"},{"location":"faq/#how-can-i-debug-issues-with-specific-modules-eg-rendering-reports-statistical-analyses","text":"For each task, Nextflow has a hash that can be found in the work directory. Inside the task folder, you can check the .command.log or .command.err to see if there's anything unusual.","title":"How can I debug issues with specific modules (e.g., rendering reports, statistical analyses)?"},{"location":"faq/#results-and-outputs","text":"","title":"Results and Outputs"},{"location":"faq/#what-do-the-output-files-in-each-directory-mean-and-how-do-i-interpret-the-metrics-and-visualizations-produced-by-the-pipeline","text":"A comprehensive description of the outputs and its interpretations can be found at the outputs section .","title":"What do the output files in each directory mean and how do I interpret the metrics and visualizations produced by the pipeline?"},{"location":"faq/#what-should-i-do-if-i-suspect-a-bug-in-the-output-files","text":"This tool is still under testing and bugs can happen. If you feel that something went wrong with the analysis, please leave an issue with a reproductible example.","title":"What should I do if I suspect a bug in the output files?"},{"location":"faq/#can-i-customize-the-report-generated-by-the-pipeline","text":"You can edit the report by directly editing the report module script.","title":"Can I customize the report generated by the pipeline?"},{"location":"faq/#customization","text":"","title":"Customization"},{"location":"faq/#can-i-add-new-analysis-modules-to-the-pipeline","text":"Yes! Since the pipeline is all built based on modules, you can add your own analysis and integrate with the pipeline at main.nf , or use this pipeline as a subworkflow.","title":"Can I add new analysis modules to the pipeline?"},{"location":"faq/#how-do-i-use-my-own-scripts-or-tools-within-the-pipeline","text":"You will have to build a module and integrate it to the main workflow.","title":"How do I use my own scripts or tools within the pipeline?"},{"location":"faq/#is-it-possible-to-change-the-default-parameter-values","text":"Not yet. Only by editing the source code for now.","title":"Is it possible to change the default parameter values?"},{"location":"faq/#how-can-i-incorporate-additional-datasets-into-the-analysis","text":"You can use any exposure/outcome/reference you want, it just need to follow the usage input guidelines .","title":"How can I incorporate additional datasets into the analysis?"},{"location":"faq/#performance-and-optimization","text":"","title":"Performance and Optimization"},{"location":"faq/#what-steps-can-i-take-to-optimize-pipeline-performance","text":"Nextflow already does that to you! But if you feel that you need something more custom, you can change nextflow.config or conf/modules.config files.","title":"What steps can I take to optimize pipeline performance?"},{"location":"faq/#can-i-run-specific-modules-independently","text":"Yes, you can use Causeway modules to build your own workflow.","title":"Can I run specific modules independently?"},{"location":"faq/#support-and-contributions","text":"","title":"Support and Contributions"},{"location":"faq/#where-can-i-report-bugs-or-request-new-features","text":"You can do these requests by raising an issue .","title":"Where can I report bugs or request new features?"},{"location":"faq/#is-there-a-user-community-or-forum-for-pipeline-related-discussions","text":"For Nextflow users, there's the nf-core community ! For this specific pipeline, there's no discussion forum.","title":"Is there a user community or forum for pipeline-related discussions?"},{"location":"faq/#how-can-i-contribute-to-the-development-of-the-pipeline","text":"If you want to make an improvement in the code, you can open a Pull Request at the Causeway's repository . If you want to be a continuous collaborator, please reach one of the authors.","title":"How can I contribute to the development of the pipeline?"},{"location":"faq/#is-there-a-citation-for-this-pipeline","text":"The paper is in reviewing process but you can cite our BioarXiv preprint:","title":"Is there a citation for this pipeline?"},{"location":"faq/#can-i-use-the-pipeline-for-commercial-purposes","text":"Yes, Causeway's license allows the use for commercial purposes.","title":"Can I use the pipeline for commercial purposes?"},{"location":"output/","text":"juliaapolonio/Causeway: Output Introduction After running a Nextflow pipeline, all the results will be available in an output directory along the pipeline root that can be set using the --outdir flag. If no outdir is set, the folder will be named null . Inside the folder is expected that you have 6 more folders: collected_files: This folder will contain the results of each analysis performed individually, such as heterogeneity test, metrics (TwoSampleMR regressions), Coloc etc. coloc: This folder will contain all coloc outputs, that are for each GSMR-significant gene: a regional plot made with locuszoomr, a .txt file with H3, H4 and causal SNP, and another .png file with coloc's default plot. final_report: This folder will contain the outputs of all results modules. A detailed explanation of these files, as well as how to interpret the metrics, will be presented in the next section. GCTA_GSMR: This folder will contain GSMR's outputs: a .log file with GSMR's execution log; a .err file if the GSMR task fails for that phenotype; a .gsmr file with the analysis results; and a gcta_error_genes.txt file, that shows every phenotype that failed because of an insufficient number of IVs. pipeline_info: Nextflow-generated informations about the pipeline run, such as RAM and storage consumption and execution time. You can check more information on what you can do with this data in the Nextflow's documentation twosamplemr: This is the folder with most of the files. In a nutshell, it has the TwoSampleMR analysis results separated by phenotype; and the TwoSampleMR's scatter plot for all metrics. Final Report folder This folder contains all merged result files: - Candidate gene list: a .txt file with all candidate effector phenotypes, separated by newline. - final results: a .csv file with the analysis results combined for each phenotype, and if the phenotype is a candidate effector or not. - summary report: an HTML report with the analysis highlights - an interactive volcano plot with candidates highlighted; an interactive forest plot with the candidates; and a table showing a brief of the metrics for each candidate, with the option to show the regional plot and MR scatter plot for each phenotype individually. A brief of the summary report Important note: for the proper renderization of the report, it must be kept along with the pipeline output folder. If moving the HTML report file, ensure to move all the output folder together. How to interpret the results Plots Volcano plot The x-axis represents the effect size of exposure on the outcome and the Y-axis is showing the FDR-adjusted p-value. The circle size is proportional to the number of instrumental variables (IVs) used in GSMR analysis. The prioritized phenotypes are highlighted in black and have name labels. Forest plot The circle size represents the variance of the effect size, while the line size is the 95% confidence interval for the effect size. Regional plot This plot is generated using LocusZoom R package and shows regional plots of eQTL (upper) and outcome GWAS (lower) at a specific locus. The index variant in each plot is represented in purple and the colocalized variant is labeled with its rsID. The lowest part of the plot is a gene browser, with the target gene colored in red. Scatter plot TwoSampleMR plot generated by Causeway showing the relationship of each IV effect on exposure against each IV effect on outcome across different MR regression methods. The error bars correspond to 95% confidence intervals for the effect size. Data in final results file GSMR metrics gsmr_beta: effect size of GSMR analysis gsmr_se: Standard error of GSMR analysis gsmr_pval: P-value of GSMR analysis gsmr_nsnp: Number of IVs selected for GSMR analysis heidi_out: p-value for HEIDI-outlier filtering analysis TwoSampleMR heterogeneity metrics Q_MR_Egger: Cochran's Q statistic estimate using MR Egger method Q_Inverse_variance_weighted: Cochran's Q statistic estimate using Inverse Variance Weighted method Q_df_MR_Egger: heterogeneity degrees of freedom using MR Egger method Q_df_Inverse_variance_weighted: heterogeneity degrees of freedom using Inverse Variance Weighted method Q_pval_MR_Egger: Cochran's Q statistic P-value using MR Egger method Q_pval_Inverse_variance_weighted: Cochran's Q statistic P-value using Inverse Variance Weighted method TwoSampleMR regression metrics nsnp: Number of IVs selected for Two Sample MR analysis b_MR_Egger: Effect size of MR Egger regression b_Weighted_median: Effect size of Weighted median regression b_Inverse_variance_weighted: Effect size of Inverse Variance Weighted regression b_Simple_mode: Effect size of Simple mode regression b_Weighted_mode: Effect size of Weighted mode regression se_MR_Egger: Standard Error of MR Egger regression se_Weighted_median: Standard Error of Weighted median regression se_Inverse_variance_weighted: Standard Error of Inverse Variance Weighted regression se_Simple_mode: Standard Error of Simple mode regression se_Weighted_mode: Standard Error of Weighted mode regression pval_MR_Egger: P-value of MR Egger regression pval_Weighted_median: P-value of Weighted median regression pval_Inverse_variance_weighted: P-value of Inverse Variance Weighted regression pval_Simple_mode: P-value of Simple mode regression pval_Weighted_mode: P-value of Weighted mode regression adjp_MR_Egger: Adjusted P-value of MR Egger regression adjp_Weighted_median: Adjusted P-value of Weighted median regression adjp_Inverse_variance_weighted: Adjusted P-value of Inverse Variance Weighted regression adjp_Simple_mode: Adjusted P-value of Simple mode regression adjp_Weighted_mode: Adjusted P-value of Weighted mode regression TwoSampleMR direction metrics snp_r2.exposure: mean r-squared of exposure effect on IVs snp_r2.outcome: mean r-squared of outcome effect on IVs correct_causal_direction: logical value, if TRUE the correct causal direction is exposure -> outcome steiger_pval: P-value of Steiger test Coloc metrics H3: H3 posterior probability of association with both traits but driven by different causal variants H4: H4 posterior probability of association with both traits driven by a shared causal variant causal_snp: most probable colocalized variant rsID TwoSampleMR pleiotropy metrics egger_intercept: intercept value of Egger regression se: Standard error of Egger regression pleiotropy_pval: P-value of Egger regression TwoSampleMR MRPRESSO metrics mrpresso_pval: global p-value of MRPRESSO test Other metrics is_candidate: logical value, if phenotype passes all filtering criteria, value = TRUE","title":"Output"},{"location":"output/#juliaapoloniocauseway-output","text":"","title":"juliaapolonio/Causeway: Output"},{"location":"output/#introduction","text":"After running a Nextflow pipeline, all the results will be available in an output directory along the pipeline root that can be set using the --outdir flag. If no outdir is set, the folder will be named null . Inside the folder is expected that you have 6 more folders: collected_files: This folder will contain the results of each analysis performed individually, such as heterogeneity test, metrics (TwoSampleMR regressions), Coloc etc. coloc: This folder will contain all coloc outputs, that are for each GSMR-significant gene: a regional plot made with locuszoomr, a .txt file with H3, H4 and causal SNP, and another .png file with coloc's default plot. final_report: This folder will contain the outputs of all results modules. A detailed explanation of these files, as well as how to interpret the metrics, will be presented in the next section. GCTA_GSMR: This folder will contain GSMR's outputs: a .log file with GSMR's execution log; a .err file if the GSMR task fails for that phenotype; a .gsmr file with the analysis results; and a gcta_error_genes.txt file, that shows every phenotype that failed because of an insufficient number of IVs. pipeline_info: Nextflow-generated informations about the pipeline run, such as RAM and storage consumption and execution time. You can check more information on what you can do with this data in the Nextflow's documentation twosamplemr: This is the folder with most of the files. In a nutshell, it has the TwoSampleMR analysis results separated by phenotype; and the TwoSampleMR's scatter plot for all metrics.","title":"Introduction"},{"location":"output/#final-report-folder","text":"This folder contains all merged result files: - Candidate gene list: a .txt file with all candidate effector phenotypes, separated by newline. - final results: a .csv file with the analysis results combined for each phenotype, and if the phenotype is a candidate effector or not. - summary report: an HTML report with the analysis highlights - an interactive volcano plot with candidates highlighted; an interactive forest plot with the candidates; and a table showing a brief of the metrics for each candidate, with the option to show the regional plot and MR scatter plot for each phenotype individually.","title":"Final Report folder"},{"location":"output/#a-brief-of-the-summary-report","text":"Important note: for the proper renderization of the report, it must be kept along with the pipeline output folder. If moving the HTML report file, ensure to move all the output folder together.","title":"A brief of the summary report"},{"location":"output/#how-to-interpret-the-results","text":"","title":"How to interpret the results"},{"location":"output/#plots","text":"","title":"Plots"},{"location":"output/#volcano-plot","text":"The x-axis represents the effect size of exposure on the outcome and the Y-axis is showing the FDR-adjusted p-value. The circle size is proportional to the number of instrumental variables (IVs) used in GSMR analysis. The prioritized phenotypes are highlighted in black and have name labels.","title":"Volcano plot"},{"location":"output/#forest-plot","text":"The circle size represents the variance of the effect size, while the line size is the 95% confidence interval for the effect size.","title":"Forest plot"},{"location":"output/#regional-plot","text":"This plot is generated using LocusZoom R package and shows regional plots of eQTL (upper) and outcome GWAS (lower) at a specific locus. The index variant in each plot is represented in purple and the colocalized variant is labeled with its rsID. The lowest part of the plot is a gene browser, with the target gene colored in red.","title":"Regional plot"},{"location":"output/#scatter-plot","text":"TwoSampleMR plot generated by Causeway showing the relationship of each IV effect on exposure against each IV effect on outcome across different MR regression methods. The error bars correspond to 95% confidence intervals for the effect size.","title":"Scatter plot"},{"location":"output/#data-in-final-results-file","text":"","title":"Data in final results file"},{"location":"output/#gsmr-metrics","text":"gsmr_beta: effect size of GSMR analysis gsmr_se: Standard error of GSMR analysis gsmr_pval: P-value of GSMR analysis gsmr_nsnp: Number of IVs selected for GSMR analysis heidi_out: p-value for HEIDI-outlier filtering analysis","title":"GSMR metrics"},{"location":"output/#twosamplemr-heterogeneity-metrics","text":"Q_MR_Egger: Cochran's Q statistic estimate using MR Egger method Q_Inverse_variance_weighted: Cochran's Q statistic estimate using Inverse Variance Weighted method Q_df_MR_Egger: heterogeneity degrees of freedom using MR Egger method Q_df_Inverse_variance_weighted: heterogeneity degrees of freedom using Inverse Variance Weighted method Q_pval_MR_Egger: Cochran's Q statistic P-value using MR Egger method Q_pval_Inverse_variance_weighted: Cochran's Q statistic P-value using Inverse Variance Weighted method","title":"TwoSampleMR heterogeneity metrics"},{"location":"output/#twosamplemr-regression-metrics","text":"nsnp: Number of IVs selected for Two Sample MR analysis b_MR_Egger: Effect size of MR Egger regression b_Weighted_median: Effect size of Weighted median regression b_Inverse_variance_weighted: Effect size of Inverse Variance Weighted regression b_Simple_mode: Effect size of Simple mode regression b_Weighted_mode: Effect size of Weighted mode regression se_MR_Egger: Standard Error of MR Egger regression se_Weighted_median: Standard Error of Weighted median regression se_Inverse_variance_weighted: Standard Error of Inverse Variance Weighted regression se_Simple_mode: Standard Error of Simple mode regression se_Weighted_mode: Standard Error of Weighted mode regression pval_MR_Egger: P-value of MR Egger regression pval_Weighted_median: P-value of Weighted median regression pval_Inverse_variance_weighted: P-value of Inverse Variance Weighted regression pval_Simple_mode: P-value of Simple mode regression pval_Weighted_mode: P-value of Weighted mode regression adjp_MR_Egger: Adjusted P-value of MR Egger regression adjp_Weighted_median: Adjusted P-value of Weighted median regression adjp_Inverse_variance_weighted: Adjusted P-value of Inverse Variance Weighted regression adjp_Simple_mode: Adjusted P-value of Simple mode regression adjp_Weighted_mode: Adjusted P-value of Weighted mode regression","title":"TwoSampleMR regression metrics"},{"location":"output/#twosamplemr-direction-metrics","text":"snp_r2.exposure: mean r-squared of exposure effect on IVs snp_r2.outcome: mean r-squared of outcome effect on IVs correct_causal_direction: logical value, if TRUE the correct causal direction is exposure -> outcome steiger_pval: P-value of Steiger test","title":"TwoSampleMR direction metrics"},{"location":"output/#coloc-metrics","text":"H3: H3 posterior probability of association with both traits but driven by different causal variants H4: H4 posterior probability of association with both traits driven by a shared causal variant causal_snp: most probable colocalized variant rsID","title":"Coloc metrics"},{"location":"output/#twosamplemr-pleiotropy-metrics","text":"egger_intercept: intercept value of Egger regression se: Standard error of Egger regression pleiotropy_pval: P-value of Egger regression","title":"TwoSampleMR pleiotropy metrics"},{"location":"output/#twosamplemr-mrpresso-metrics","text":"mrpresso_pval: global p-value of MRPRESSO test","title":"TwoSampleMR MRPRESSO metrics"},{"location":"output/#other-metrics","text":"is_candidate: logical value, if phenotype passes all filtering criteria, value = TRUE","title":"Other metrics"},{"location":"usage/","text":"juliaapolonio/Causeway: Usage Inputs Causeway needs 3 different inputs: Exposure samplesheet It is a .csv file containing the exposure phenotype name (i.e. gene name in eQTL) and path to the summary statistics file. It must have a header sample,path and should have one line per phenotype. Check the test data file for an example of an exposure samplesheet. Outcome samplesheet It is a .csv file containing the outcome phenotype name (i.e. Type2Diabetes) and path to the summary statistics file. It must have a header sample,path and should have one line per phenotype. Check the test data file for an example of an outcome samplesheet. Reference folder Instead of downloading the reference files at each execution (around 2GB of data), you can have the files locally and point to the pipeline a folder where the data is. The reference must not be split by chromosome, and there should be 3 files with the following extensions: .bed, .bim and .fam. The folder should not be zipped as well. Check the Zenodo reference file provided for an example of reference folder. Important note: the example file is a reference for European population. If your data is from another ancestry, provide your reference data accordingly. If you need assistance on how to convert p-files to the required format, check setup_bfile.sh script. Exposure and Outcome summary statistics format All exposure/outcome files should be in GCTA-Cojo format , which is: SNP A1 A2 freq b se p N Columns are SNP (rsID identifier), the effect allele, the other allele, frequency of the effect allele, effect size, standard error, p-value and sample size. Important: \"A1\" needs to be the effect allele with \"A2\" being the other allele and \"freq\" should be the frequency of \"A1\". All exposure and outcome files must be gzipped (.gz extension format) Replication of the paper analysis To replicate the analysis, download and untar the data inside the root of the pipeline. Then, use the following command: nextflow run juliaapolonio/Causeway \\ --exposures replicate_analysis/samplesheet_exposure.csv \\ --outdir replication \\ --ref $PWD/replicate_analysis/tsmr_ref/ \\ --outcomes replicate_analysis/samplesheet_outcome.csv \\ -profile <docker/singularity/podman/shifter/charliecloud/conda/institute> Optional flags Some optional flags can be added to the pipeline execution: run_eqtlgen This flag runs the analysis with eQTLGen cis-eQTL data. It is still needed to supply the Outcomes samplesheet. WIP: create_ref This flag builds the reference b-files from the Plink 2 resource p-files links. WIP: skip_reports This flag skip the report rendering module WIP: skip_twosamplemr This flag skips the TwoSampleMR process and all subsequent steps WIP: skip_coloc This flag skips the coloc process and all subsequent steps System requirements To ensure smooth execution of the pipeline, the following system requirements must be met: Hardware Requirements CPU: Minimum of 4 cores (16 or more recommended for faster execution). RAM: At least 6 GB (50GB or more recommended for large datasets). Storage: Minimum of 20 GB of available disk space for intermediate files and outputs. Additional space may be required depending on the size of input datasets. Operating System Supported Platforms: Linux macOS Windows Subsystem for Linux Software Requirements Pipeline Management: Nextflow ( >=22.10.1 ). Note: Nextflow requires Bash 3.2 (or later) and Java 17 (or later, up to 23) Dependencies and Package Managers You don\u00b4t need to install any dependencies apart from Nextflow. Install any of Docker , Singularity (you can follow this tutorial ), Podman , Shifter or Charliecloud for full pipeline reproducibility (you can use Conda both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see docs ) . Network Access Required for downloading dependencies and container images during setup. Visualization Tools A software that renders HTML files (such as any web browser) for visualization of the summary report. Testing Environment A small test dataset is included with the pipeline to verify the installation and setup. Ensure the system can successfully execute the test workflow before running large-scale analyses. Some Nextflow and nf-core settings Updating the pipeline When you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you're running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline: nextflow pull juliaapolonio/Causeway Reproducibility It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since. First, go to the juliaapolonio/causeway releases page and find the latest pipeline version - numeric only (eg. 1.3.1 ). Then specify this when running the pipeline with -r (one hyphen) - eg. -r 1.3.1 . Of course, you can switch to another version by changing the number after the -r flag. This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future. For example, at the bottom of the MultiQC reports. To further assist in reproducbility, you can use share and re-use parameter files to repeat pipeline runs with the same settings without having to write out a command with every single parameter. :::tip If you wish to share such profile (such as upload as supplementary material for academic publications), make sure to NOT include cluster specific paths to files, nor institutional specific profiles. ::: Core Nextflow arguments note: These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen). -profile Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments. Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Apptainer, Conda) - see below. info: We highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported. The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation . Note that multiple profiles can be loaded, for example: -profile test,docker - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles. If -profile is not specified, the pipeline will run locally and expect all software to be installed and available on the PATH . This is not recommended, since it can lead to different results on different machines dependent on the computer enviroment. test A profile with a complete configuration for automated testing Includes links to test data so needs no other parameters docker A generic configuration profile to be used with Docker singularity A generic configuration profile to be used with Singularity podman A generic configuration profile to be used with Podman shifter A generic configuration profile to be used with Shifter charliecloud A generic configuration profile to be used with Charliecloud apptainer A generic configuration profile to be used with Apptainer wave A generic configuration profile to enable Wave containers. Use together with one of the above (requires Nextflow 24.03.0-edge or later). -resume Specify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files' contents as well. For more info about this parameter, see this blog post . You can also supply a run name to resume a specific run: -resume [run-name] . Use the nextflow log command to show previous run names. -c Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information. Custom configuration Resource requests Whilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped. To change the resource requests, please see the max resources and tuning workflow resources section of the nf-core website. Custom Containers In some cases you may wish to change which container or conda environment a step of the pipeline uses for a particular tool. By default nf-core pipelines use containers and software from the biocontainers or bioconda projects. However in some cases the pipeline specified version maybe out of date. To use a different container from the default container or conda environment specified in a pipeline, please see the updating tool versions section of the nf-core website. Custom Tool Arguments A pipeline might not always support every possible argument or option of a particular tool used in pipeline. Fortunately, nf-core pipelines provide some freedom to users to insert additional parameters that the pipeline does not include by default. To learn how to provide additional arguments to a particular tool of the pipeline, please see the customising tool arguments section of the nf-core website. nf-core/configs In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the nf-core/configs git repository. Before you do this please can you test that the config file works with your pipeline of choice using the -c parameter. You can then create a pull request to the nf-core/configs repository with the addition of your config file, associated documentation file (see examples in nf-core/configs/docs ), and amending nfcore_custom.config to include your custom profile. See the main Nextflow documentation for more information about creating your own configuration files. If you have any questions or issues please send us a message on Slack on the #configs channel . Running in the background Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished. The Nextflow -bg flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file. Alternatively, you can use screen / tmux or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs). Nextflow memory requirements In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in ~/.bashrc or ~./bash_profile ): NXF_OPTS='-Xms1g -Xmx4g'","title":"Usage"},{"location":"usage/#juliaapoloniocauseway-usage","text":"","title":"juliaapolonio/Causeway: Usage"},{"location":"usage/#inputs","text":"Causeway needs 3 different inputs:","title":"Inputs"},{"location":"usage/#exposure-samplesheet","text":"It is a .csv file containing the exposure phenotype name (i.e. gene name in eQTL) and path to the summary statistics file. It must have a header sample,path and should have one line per phenotype. Check the test data file for an example of an exposure samplesheet.","title":"Exposure samplesheet"},{"location":"usage/#outcome-samplesheet","text":"It is a .csv file containing the outcome phenotype name (i.e. Type2Diabetes) and path to the summary statistics file. It must have a header sample,path and should have one line per phenotype. Check the test data file for an example of an outcome samplesheet.","title":"Outcome samplesheet"},{"location":"usage/#reference-folder","text":"Instead of downloading the reference files at each execution (around 2GB of data), you can have the files locally and point to the pipeline a folder where the data is. The reference must not be split by chromosome, and there should be 3 files with the following extensions: .bed, .bim and .fam. The folder should not be zipped as well. Check the Zenodo reference file provided for an example of reference folder. Important note: the example file is a reference for European population. If your data is from another ancestry, provide your reference data accordingly. If you need assistance on how to convert p-files to the required format, check setup_bfile.sh script.","title":"Reference folder"},{"location":"usage/#exposure-and-outcome-summary-statistics-format","text":"All exposure/outcome files should be in GCTA-Cojo format , which is: SNP A1 A2 freq b se p N Columns are SNP (rsID identifier), the effect allele, the other allele, frequency of the effect allele, effect size, standard error, p-value and sample size. Important: \"A1\" needs to be the effect allele with \"A2\" being the other allele and \"freq\" should be the frequency of \"A1\". All exposure and outcome files must be gzipped (.gz extension format)","title":"Exposure and Outcome summary statistics format"},{"location":"usage/#replication-of-the-paper-analysis","text":"To replicate the analysis, download and untar the data inside the root of the pipeline. Then, use the following command: nextflow run juliaapolonio/Causeway \\ --exposures replicate_analysis/samplesheet_exposure.csv \\ --outdir replication \\ --ref $PWD/replicate_analysis/tsmr_ref/ \\ --outcomes replicate_analysis/samplesheet_outcome.csv \\ -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>","title":"Replication of the paper analysis"},{"location":"usage/#optional-flags","text":"Some optional flags can be added to the pipeline execution:","title":"Optional flags"},{"location":"usage/#run_eqtlgen","text":"This flag runs the analysis with eQTLGen cis-eQTL data. It is still needed to supply the Outcomes samplesheet.","title":"run_eqtlgen"},{"location":"usage/#wip-create_ref","text":"This flag builds the reference b-files from the Plink 2 resource p-files links.","title":"WIP: create_ref"},{"location":"usage/#wip-skip_reports","text":"This flag skip the report rendering module","title":"WIP: skip_reports"},{"location":"usage/#wip-skip_twosamplemr","text":"This flag skips the TwoSampleMR process and all subsequent steps","title":"WIP: skip_twosamplemr"},{"location":"usage/#wip-skip_coloc","text":"This flag skips the coloc process and all subsequent steps","title":"WIP: skip_coloc"},{"location":"usage/#system-requirements","text":"To ensure smooth execution of the pipeline, the following system requirements must be met:","title":"System requirements"},{"location":"usage/#hardware-requirements","text":"CPU: Minimum of 4 cores (16 or more recommended for faster execution). RAM: At least 6 GB (50GB or more recommended for large datasets).","title":"Hardware Requirements"},{"location":"usage/#storage","text":"Minimum of 20 GB of available disk space for intermediate files and outputs. Additional space may be required depending on the size of input datasets.","title":"Storage:"},{"location":"usage/#operating-system","text":"Supported Platforms: Linux macOS Windows Subsystem for Linux","title":"Operating System"},{"location":"usage/#software-requirements","text":"Pipeline Management: Nextflow ( >=22.10.1 ). Note: Nextflow requires Bash 3.2 (or later) and Java 17 (or later, up to 23)","title":"Software Requirements"},{"location":"usage/#dependencies-and-package-managers","text":"You don\u00b4t need to install any dependencies apart from Nextflow. Install any of Docker , Singularity (you can follow this tutorial ), Podman , Shifter or Charliecloud for full pipeline reproducibility (you can use Conda both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see docs ) .","title":"Dependencies and Package Managers"},{"location":"usage/#network-access","text":"Required for downloading dependencies and container images during setup.","title":"Network Access"},{"location":"usage/#visualization-tools","text":"A software that renders HTML files (such as any web browser) for visualization of the summary report.","title":"Visualization Tools"},{"location":"usage/#testing-environment","text":"A small test dataset is included with the pipeline to verify the installation and setup. Ensure the system can successfully execute the test workflow before running large-scale analyses.","title":"Testing Environment"},{"location":"usage/#some-nextflow-and-nf-core-settings","text":"","title":"Some Nextflow and nf-core settings"},{"location":"usage/#updating-the-pipeline","text":"When you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you're running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline: nextflow pull juliaapolonio/Causeway","title":"Updating the pipeline"},{"location":"usage/#reproducibility","text":"It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since. First, go to the juliaapolonio/causeway releases page and find the latest pipeline version - numeric only (eg. 1.3.1 ). Then specify this when running the pipeline with -r (one hyphen) - eg. -r 1.3.1 . Of course, you can switch to another version by changing the number after the -r flag. This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future. For example, at the bottom of the MultiQC reports. To further assist in reproducbility, you can use share and re-use parameter files to repeat pipeline runs with the same settings without having to write out a command with every single parameter. :::tip If you wish to share such profile (such as upload as supplementary material for academic publications), make sure to NOT include cluster specific paths to files, nor institutional specific profiles. :::","title":"Reproducibility"},{"location":"usage/#core-nextflow-arguments","text":"note: These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen).","title":"Core Nextflow arguments"},{"location":"usage/#-profile","text":"Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments. Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Apptainer, Conda) - see below. info: We highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported. The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation . Note that multiple profiles can be loaded, for example: -profile test,docker - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles. If -profile is not specified, the pipeline will run locally and expect all software to be installed and available on the PATH . This is not recommended, since it can lead to different results on different machines dependent on the computer enviroment. test A profile with a complete configuration for automated testing Includes links to test data so needs no other parameters docker A generic configuration profile to be used with Docker singularity A generic configuration profile to be used with Singularity podman A generic configuration profile to be used with Podman shifter A generic configuration profile to be used with Shifter charliecloud A generic configuration profile to be used with Charliecloud apptainer A generic configuration profile to be used with Apptainer wave A generic configuration profile to enable Wave containers. Use together with one of the above (requires Nextflow 24.03.0-edge or later).","title":"-profile"},{"location":"usage/#-resume","text":"Specify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files' contents as well. For more info about this parameter, see this blog post . You can also supply a run name to resume a specific run: -resume [run-name] . Use the nextflow log command to show previous run names.","title":"-resume"},{"location":"usage/#-c","text":"Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information.","title":"-c"},{"location":"usage/#custom-configuration","text":"","title":"Custom configuration"},{"location":"usage/#resource-requests","text":"Whilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped. To change the resource requests, please see the max resources and tuning workflow resources section of the nf-core website.","title":"Resource requests"},{"location":"usage/#custom-containers","text":"In some cases you may wish to change which container or conda environment a step of the pipeline uses for a particular tool. By default nf-core pipelines use containers and software from the biocontainers or bioconda projects. However in some cases the pipeline specified version maybe out of date. To use a different container from the default container or conda environment specified in a pipeline, please see the updating tool versions section of the nf-core website.","title":"Custom Containers"},{"location":"usage/#custom-tool-arguments","text":"A pipeline might not always support every possible argument or option of a particular tool used in pipeline. Fortunately, nf-core pipelines provide some freedom to users to insert additional parameters that the pipeline does not include by default. To learn how to provide additional arguments to a particular tool of the pipeline, please see the customising tool arguments section of the nf-core website.","title":"Custom Tool Arguments"},{"location":"usage/#nf-coreconfigs","text":"In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the nf-core/configs git repository. Before you do this please can you test that the config file works with your pipeline of choice using the -c parameter. You can then create a pull request to the nf-core/configs repository with the addition of your config file, associated documentation file (see examples in nf-core/configs/docs ), and amending nfcore_custom.config to include your custom profile. See the main Nextflow documentation for more information about creating your own configuration files. If you have any questions or issues please send us a message on Slack on the #configs channel .","title":"nf-core/configs"},{"location":"usage/#running-in-the-background","text":"Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished. The Nextflow -bg flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file. Alternatively, you can use screen / tmux or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs).","title":"Running in the background"},{"location":"usage/#nextflow-memory-requirements","text":"In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in ~/.bashrc or ~./bash_profile ): NXF_OPTS='-Xms1g -Xmx4g'","title":"Nextflow memory requirements"}]}