{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview juliaapolonio/Causeway is a pipeline for Mendelian Randomization and sensitivity analysis between a phenotype GWAS sumstats and QTL data. Previous MR tools have been used to analyze a small number of exposure-outcome combinations, but they are not optimized to perform with a large number of combinations such as in a genome-wide QTL screening. In this context, Causeway was built to enable MR + sensitivity analysis in a user-friendly and computationally effective way. The pipeline is built using Nextflow , a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. As a future improvement, when possible, the local modules will be submitted to and installed from nf-core/modules in order to make them available to all nf-core pipelines, and to everyone within the Nextflow community! Pipeline summary Generalized Summary Mendelian Randomization (GSMR) This is the main part of the process. It runs GSMR for all Exposures vs the Outcomes and returns: number of IVs, betas, SEs and p-values for each exposure. Significant gene calculation and filtering With the results from GSMR, this module calculates the FDR p-value for each gene and filters by it and the number of IVs. This step will substantially decrease the number of tasks for the subsequent processes, and therefore, the execution time of the pipeline. Two Sample MR (2SMR) Two Sample MR is an R package that performs Mendelian Randomization and sensitivity analysis. The workflow is configured to run the following 2SMR tests: Inverse Variance Weighted regression; Simple Median regression; Simple mode regression; MR Egger regression; Heterogeneity Egger; Heterogeneity Inverse Variance Weighted; Steiger direction test; Pleiotropy Egger intercept; MR-PRESSO outlier analysis. Coloc Coloc is an R package for colocalization analysis. For this workflow, the information retrieved from Coloc are: H3; H4; Most probable causal variant. Generate output report This set of processes collects all results from the analysis and merges them into a single .csv file and the results are filtered to a list of candidate drug targets. An HTML report is generated with the analysis highlights. Quick Start Install Nextflow ( >=22.10.1 ) Install any of Docker , Singularity (you can follow this tutorial ), Podman , Shifter or Charliecloud for full pipeline reproducibility (you can use Conda both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see docs ) . Download the pipeline and test it on a minimal dataset with a single command: nextflow run juliaapolonio/Causeway -profile test,YOURPROFILE --outdir <OUTDIR> This will set up 4 genes from eQTLGen cis-eQTL data and 1000 Genomes phase 3 dataset (GRCh37) genotype p-file with a custom Strict Depression summary statistics retrieved from MTAG. Note that some form of configuration will be needed so that Nextflow knows how to fetch the required software. This is usually done in the form of a config profile ( YOURPROFILE in the example command above). The pipeline comes with config profiles called docker , singularity , podman , shifter , charliecloud and conda which instruct the pipeline to use the named tool for software management. For example, -profile test,docker . Please check nf-core/configs to see if a custom config file to run nf-core pipelines already exists for your Institute. If so, you can simply use -profile <institute> in your command. This will enable either docker or singularity and set the appropriate execution settings for your local compute environment. If you are using singularity , please use the nf-core download command to download images first, before running the pipeline. Setting the NXF_SINGULARITY_CACHEDIR or singularity.cacheDir Nextflow options enables you to store and re-use the images from a central location for future pipeline runs. If you are using conda , it is highly recommended to use the NXF_CONDA_CACHEDIR or conda.cacheDir settings to store the environments in a central location for future pipeline runs. Start running your own analysis! nextflow run juliaapolonio/Causeway \\ --exposure <EXPOSURE_SAMPLESHEET> \\ --outdir <OUTDIR> \\ --ref <REFERENCE_FOLDER> \\ --outcome <OUTCOME_SAMPLESHEET> \\ -profile <docker/singularity/podman/shifter/charliecloud/conda/institute> Databases and references MR_workflow needs 3 inputs to run: A reference folder; An Exposure sample sheet; An Outcome file. Both Exposure and Outcome files should follow the GCTA-Cojo format . The Exposure file should be separated by one gene per file. The reference files should be in PLINK bfile format. Neither the Exposure nor the Outcome files should contain multi-allelic SNPs; the frequency (freq) is the Minor Allele Frequency (MAF). If the Outcome has a small number of SNPs (less than 2M) it is expected that a substantial amount of the tasks will fail due to lack or small number of matching IVs between the Exposure and Outcome data. If the Outcome data has a large number of SNPs (more than 10M) it is still expected that around 10% of GSMR tasks will fail. Outputs If successfully run, the workflow should give three files as the main output: summary_report.html is a html report with all analysis highlights; mr_merged_results.csv should contain all analyses results for each GSMR significant gene; significant_genes.txt should give a gene list of all genes that fill the criteria defined in its paper. Other intermediate outputs are stored in a folder with the corresponding process name. Credits juliaapolonio/Causeway was authored by Julia Apolonio with Jo\u00e3o Cavalcante and Diego Coelho 's assistance, under Dr. Vasiliki Lagou 's supervision. Citations Causal associations between risk factors and common diseases inferred from GWAS summary data. Zhihong Zhu, Zhili Zheng, Futao Zhang, Yang Wu, Maciej Trzaskowski, Robert Maier, Matthew R. Robinson, John J. McGrath, Peter M. Visscher, Naomi R. Wray & Jian Yang Nature Communications 2018 Jan 15. doi: 10.1038/s41467-017-02317-2 The MR-Base platform supports systematic causal inference across the human phenome. Hemani G, Zheng J, Elsworth B, Wade KH, Baird D, Haberland V, Laurin C, Burgess S, Bowden J, Langdon R, Tan VY, Yarmolinsky J, Shihab HA, Timpson NJ, Evans DM, Relton C, Martin RM, Davey Smith G, Gaunt TR, Haycock PC, The MR-Base Collaboration. eLife 2018 Jul. doi: 10.7554/eLife.34408 Eliciting priors and relaxing the single causal variant assumption in colocalisation analyses Chris Wallace PLOS Genetics 2020 Apr 20. doi: 10.1371/journal.pgen.1008720 The nf-core framework for community-curated bioinformatics pipelines. Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen. Nat Biotechnol. 2020 Feb 13. doi: 10.1038/s41587-020-0439-x .","title":"Home"},{"location":"#overview","text":"juliaapolonio/Causeway is a pipeline for Mendelian Randomization and sensitivity analysis between a phenotype GWAS sumstats and QTL data. Previous MR tools have been used to analyze a small number of exposure-outcome combinations, but they are not optimized to perform with a large number of combinations such as in a genome-wide QTL screening. In this context, Causeway was built to enable MR + sensitivity analysis in a user-friendly and computationally effective way. The pipeline is built using Nextflow , a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The Nextflow DSL2 implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. As a future improvement, when possible, the local modules will be submitted to and installed from nf-core/modules in order to make them available to all nf-core pipelines, and to everyone within the Nextflow community!","title":"Overview"},{"location":"#pipeline-summary","text":"","title":"Pipeline summary"},{"location":"#generalized-summary-mendelian-randomization-gsmr","text":"This is the main part of the process. It runs GSMR for all Exposures vs the Outcomes and returns: number of IVs, betas, SEs and p-values for each exposure.","title":"Generalized Summary Mendelian Randomization (GSMR)"},{"location":"#significant-gene-calculation-and-filtering","text":"With the results from GSMR, this module calculates the FDR p-value for each gene and filters by it and the number of IVs. This step will substantially decrease the number of tasks for the subsequent processes, and therefore, the execution time of the pipeline.","title":"Significant gene calculation and filtering"},{"location":"#two-sample-mr-2smr","text":"Two Sample MR is an R package that performs Mendelian Randomization and sensitivity analysis. The workflow is configured to run the following 2SMR tests: Inverse Variance Weighted regression; Simple Median regression; Simple mode regression; MR Egger regression; Heterogeneity Egger; Heterogeneity Inverse Variance Weighted; Steiger direction test; Pleiotropy Egger intercept; MR-PRESSO outlier analysis.","title":"Two Sample MR (2SMR)"},{"location":"#coloc","text":"Coloc is an R package for colocalization analysis. For this workflow, the information retrieved from Coloc are: H3; H4; Most probable causal variant.","title":"Coloc"},{"location":"#generate-output-report","text":"This set of processes collects all results from the analysis and merges them into a single .csv file and the results are filtered to a list of candidate drug targets. An HTML report is generated with the analysis highlights.","title":"Generate output report"},{"location":"#quick-start","text":"Install Nextflow ( >=22.10.1 ) Install any of Docker , Singularity (you can follow this tutorial ), Podman , Shifter or Charliecloud for full pipeline reproducibility (you can use Conda both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see docs ) . Download the pipeline and test it on a minimal dataset with a single command: nextflow run juliaapolonio/Causeway -profile test,YOURPROFILE --outdir <OUTDIR> This will set up 4 genes from eQTLGen cis-eQTL data and 1000 Genomes phase 3 dataset (GRCh37) genotype p-file with a custom Strict Depression summary statistics retrieved from MTAG. Note that some form of configuration will be needed so that Nextflow knows how to fetch the required software. This is usually done in the form of a config profile ( YOURPROFILE in the example command above). The pipeline comes with config profiles called docker , singularity , podman , shifter , charliecloud and conda which instruct the pipeline to use the named tool for software management. For example, -profile test,docker . Please check nf-core/configs to see if a custom config file to run nf-core pipelines already exists for your Institute. If so, you can simply use -profile <institute> in your command. This will enable either docker or singularity and set the appropriate execution settings for your local compute environment. If you are using singularity , please use the nf-core download command to download images first, before running the pipeline. Setting the NXF_SINGULARITY_CACHEDIR or singularity.cacheDir Nextflow options enables you to store and re-use the images from a central location for future pipeline runs. If you are using conda , it is highly recommended to use the NXF_CONDA_CACHEDIR or conda.cacheDir settings to store the environments in a central location for future pipeline runs. Start running your own analysis! nextflow run juliaapolonio/Causeway \\ --exposure <EXPOSURE_SAMPLESHEET> \\ --outdir <OUTDIR> \\ --ref <REFERENCE_FOLDER> \\ --outcome <OUTCOME_SAMPLESHEET> \\ -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>","title":"Quick Start"},{"location":"#databases-and-references","text":"MR_workflow needs 3 inputs to run: A reference folder; An Exposure sample sheet; An Outcome file. Both Exposure and Outcome files should follow the GCTA-Cojo format . The Exposure file should be separated by one gene per file. The reference files should be in PLINK bfile format. Neither the Exposure nor the Outcome files should contain multi-allelic SNPs; the frequency (freq) is the Minor Allele Frequency (MAF). If the Outcome has a small number of SNPs (less than 2M) it is expected that a substantial amount of the tasks will fail due to lack or small number of matching IVs between the Exposure and Outcome data. If the Outcome data has a large number of SNPs (more than 10M) it is still expected that around 10% of GSMR tasks will fail.","title":"Databases and references"},{"location":"#outputs","text":"If successfully run, the workflow should give three files as the main output: summary_report.html is a html report with all analysis highlights; mr_merged_results.csv should contain all analyses results for each GSMR significant gene; significant_genes.txt should give a gene list of all genes that fill the criteria defined in its paper. Other intermediate outputs are stored in a folder with the corresponding process name.","title":"Outputs"},{"location":"#credits","text":"juliaapolonio/Causeway was authored by Julia Apolonio with Jo\u00e3o Cavalcante and Diego Coelho 's assistance, under Dr. Vasiliki Lagou 's supervision.","title":"Credits"},{"location":"#citations","text":"Causal associations between risk factors and common diseases inferred from GWAS summary data. Zhihong Zhu, Zhili Zheng, Futao Zhang, Yang Wu, Maciej Trzaskowski, Robert Maier, Matthew R. Robinson, John J. McGrath, Peter M. Visscher, Naomi R. Wray & Jian Yang Nature Communications 2018 Jan 15. doi: 10.1038/s41467-017-02317-2 The MR-Base platform supports systematic causal inference across the human phenome. Hemani G, Zheng J, Elsworth B, Wade KH, Baird D, Haberland V, Laurin C, Burgess S, Bowden J, Langdon R, Tan VY, Yarmolinsky J, Shihab HA, Timpson NJ, Evans DM, Relton C, Martin RM, Davey Smith G, Gaunt TR, Haycock PC, The MR-Base Collaboration. eLife 2018 Jul. doi: 10.7554/eLife.34408 Eliciting priors and relaxing the single causal variant assumption in colocalisation analyses Chris Wallace PLOS Genetics 2020 Apr 20. doi: 10.1371/journal.pgen.1008720 The nf-core framework for community-curated bioinformatics pipelines. Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen. Nat Biotechnol. 2020 Feb 13. doi: 10.1038/s41587-020-0439-x .","title":"Citations"},{"location":"output/","text":"juliaapolonio/Causeway: Output","title":"Output"},{"location":"output/#juliaapoloniocauseway-output","text":"","title":"juliaapolonio/Causeway: Output"},{"location":"usage/","text":"juliaapolonio/Causeway: Usage Updating the pipeline When you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you're running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline: nextflow pull juliaapolonio/causeway Reproducibility It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since. First, go to the juliaapolonio/causeway releases page and find the latest pipeline version - numeric only (eg. 1.3.1 ). Then specify this when running the pipeline with -r (one hyphen) - eg. -r 1.3.1 . Of course, you can switch to another version by changing the number after the -r flag. This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future. For example, at the bottom of the MultiQC reports. To further assist in reproducbility, you can use share and re-use parameter files to repeat pipeline runs with the same settings without having to write out a command with every single parameter. :::tip If you wish to share such profile (such as upload as supplementary material for academic publications), make sure to NOT include cluster specific paths to files, nor institutional specific profiles. ::: Core Nextflow arguments :::note These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen). ::: -profile Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments. Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Apptainer, Conda) - see below. :::info We highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported. ::: The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation . Note that multiple profiles can be loaded, for example: -profile test,docker - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles. If -profile is not specified, the pipeline will run locally and expect all software to be installed and available on the PATH . This is not recommended, since it can lead to different results on different machines dependent on the computer enviroment. test A profile with a complete configuration for automated testing Includes links to test data so needs no other parameters docker A generic configuration profile to be used with Docker singularity A generic configuration profile to be used with Singularity podman A generic configuration profile to be used with Podman shifter A generic configuration profile to be used with Shifter charliecloud A generic configuration profile to be used with Charliecloud apptainer A generic configuration profile to be used with Apptainer wave A generic configuration profile to enable Wave containers. Use together with one of the above (requires Nextflow 24.03.0-edge or later). -resume Specify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files' contents as well. For more info about this parameter, see this blog post . You can also supply a run name to resume a specific run: -resume [run-name] . Use the nextflow log command to show previous run names. -c Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information. Custom configuration Resource requests Whilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped. To change the resource requests, please see the max resources and tuning workflow resources section of the nf-core website. Custom Containers In some cases you may wish to change which container or conda environment a step of the pipeline uses for a particular tool. By default nf-core pipelines use containers and software from the biocontainers or bioconda projects. However in some cases the pipeline specified version maybe out of date. To use a different container from the default container or conda environment specified in a pipeline, please see the updating tool versions section of the nf-core website. Custom Tool Arguments A pipeline might not always support every possible argument or option of a particular tool used in pipeline. Fortunately, nf-core pipelines provide some freedom to users to insert additional parameters that the pipeline does not include by default. To learn how to provide additional arguments to a particular tool of the pipeline, please see the customising tool arguments section of the nf-core website. nf-core/configs In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the nf-core/configs git repository. Before you do this please can you test that the config file works with your pipeline of choice using the -c parameter. You can then create a pull request to the nf-core/configs repository with the addition of your config file, associated documentation file (see examples in nf-core/configs/docs ), and amending nfcore_custom.config to include your custom profile. See the main Nextflow documentation for more information about creating your own configuration files. If you have any questions or issues please send us a message on Slack on the #configs channel . Running in the background Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished. The Nextflow -bg flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file. Alternatively, you can use screen / tmux or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs). Nextflow memory requirements In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in ~/.bashrc or ~./bash_profile ): NXF_OPTS='-Xms1g -Xmx4g'","title":"Usage"},{"location":"usage/#juliaapoloniocauseway-usage","text":"","title":"juliaapolonio/Causeway: Usage"},{"location":"usage/#updating-the-pipeline","text":"When you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you're running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline: nextflow pull juliaapolonio/causeway","title":"Updating the pipeline"},{"location":"usage/#reproducibility","text":"It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since. First, go to the juliaapolonio/causeway releases page and find the latest pipeline version - numeric only (eg. 1.3.1 ). Then specify this when running the pipeline with -r (one hyphen) - eg. -r 1.3.1 . Of course, you can switch to another version by changing the number after the -r flag. This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future. For example, at the bottom of the MultiQC reports. To further assist in reproducbility, you can use share and re-use parameter files to repeat pipeline runs with the same settings without having to write out a command with every single parameter. :::tip If you wish to share such profile (such as upload as supplementary material for academic publications), make sure to NOT include cluster specific paths to files, nor institutional specific profiles. :::","title":"Reproducibility"},{"location":"usage/#core-nextflow-arguments","text":":::note These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen). :::","title":"Core Nextflow arguments"},{"location":"usage/#-profile","text":"Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments. Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Apptainer, Conda) - see below. :::info We highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported. ::: The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation . Note that multiple profiles can be loaded, for example: -profile test,docker - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles. If -profile is not specified, the pipeline will run locally and expect all software to be installed and available on the PATH . This is not recommended, since it can lead to different results on different machines dependent on the computer enviroment. test A profile with a complete configuration for automated testing Includes links to test data so needs no other parameters docker A generic configuration profile to be used with Docker singularity A generic configuration profile to be used with Singularity podman A generic configuration profile to be used with Podman shifter A generic configuration profile to be used with Shifter charliecloud A generic configuration profile to be used with Charliecloud apptainer A generic configuration profile to be used with Apptainer wave A generic configuration profile to enable Wave containers. Use together with one of the above (requires Nextflow 24.03.0-edge or later).","title":"-profile"},{"location":"usage/#-resume","text":"Specify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files' contents as well. For more info about this parameter, see this blog post . You can also supply a run name to resume a specific run: -resume [run-name] . Use the nextflow log command to show previous run names.","title":"-resume"},{"location":"usage/#-c","text":"Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information.","title":"-c"},{"location":"usage/#custom-configuration","text":"","title":"Custom configuration"},{"location":"usage/#resource-requests","text":"Whilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped. To change the resource requests, please see the max resources and tuning workflow resources section of the nf-core website.","title":"Resource requests"},{"location":"usage/#custom-containers","text":"In some cases you may wish to change which container or conda environment a step of the pipeline uses for a particular tool. By default nf-core pipelines use containers and software from the biocontainers or bioconda projects. However in some cases the pipeline specified version maybe out of date. To use a different container from the default container or conda environment specified in a pipeline, please see the updating tool versions section of the nf-core website.","title":"Custom Containers"},{"location":"usage/#custom-tool-arguments","text":"A pipeline might not always support every possible argument or option of a particular tool used in pipeline. Fortunately, nf-core pipelines provide some freedom to users to insert additional parameters that the pipeline does not include by default. To learn how to provide additional arguments to a particular tool of the pipeline, please see the customising tool arguments section of the nf-core website.","title":"Custom Tool Arguments"},{"location":"usage/#nf-coreconfigs","text":"In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the nf-core/configs git repository. Before you do this please can you test that the config file works with your pipeline of choice using the -c parameter. You can then create a pull request to the nf-core/configs repository with the addition of your config file, associated documentation file (see examples in nf-core/configs/docs ), and amending nfcore_custom.config to include your custom profile. See the main Nextflow documentation for more information about creating your own configuration files. If you have any questions or issues please send us a message on Slack on the #configs channel .","title":"nf-core/configs"},{"location":"usage/#running-in-the-background","text":"Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished. The Nextflow -bg flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file. Alternatively, you can use screen / tmux or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs).","title":"Running in the background"},{"location":"usage/#nextflow-memory-requirements","text":"In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in ~/.bashrc or ~./bash_profile ): NXF_OPTS='-Xms1g -Xmx4g'","title":"Nextflow memory requirements"}]}